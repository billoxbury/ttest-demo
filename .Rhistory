tab[[1]]
as.array(tab)
as.numeric(tab)
plot(as.numeric(table(S)) ~ A, type='h', col='blue', frame.plot=0)
plot(as.numeric(table(S)) ~ A, type='h', col='blue', frame.plot=0)
as.numeric(table(S))
length(as.numeric(table(S)))
length(S)
ct <- sapply(A, function(a) sum(S==a))
plot(ct ~ A, type='h', col='blue', frame.plot=0)
T <- 100000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a)/T)
plot(P ~ A, type='h', col='grey', frame.plot=0)
points(ct ~ A, type='h', col='blue')
T <- 100000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a)/n)
plot(P ~ A, type='h', col='grey', frame.plot=0)
points(ct ~ A, type='h', col='blue')
T <- 100000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P ~ A, type='h', col='grey', frame.plot=0)
plot(ct ~ A, type='h', col='blue')
plot(P ~ A, type='h', col='grey', frame.plot=0)
plot(ct ~ A, type='h', col='blue', frame.plot=0)
T <- 1000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P ~ A, type='h', col='grey', frame.plot=0)
plot(ct ~ A, type='h', col='blue', frame.plot=0)
P <- sort(rnorm(n)^2)
T <- 1000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P ~ A, type='h', col='grey', frame.plot=0)
plot(ct ~ A, type='h', col='blue', frame.plot=0)
T <- 1000000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P ~ A, type='h', col='grey', frame.plot=0)
plot(ct ~ A, type='h', col='blue', frame.plot=0)
plot(P*T ~ A, type='h', col='grey', frame.plot=0)
points(ct ~ A, type='h', col='blue', frame.plot=0)
P <- sort(rnorm(n)^2)
P <- P/sum(P)
T <- 1000000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A, type='h', col='grey', frame.plot=0)
points(ct ~ A, type='h', col='blue', frame.plot=0)
Ashift <- A + 0.5; points(ct ~ Ashift, type='h', col='blue', frame.plot=0)
T <- 1000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A, type='h', col='grey', frame.plot=0)
Ashift <- A + 0.5; points(ct ~ Ashift, type='h', col='blue', frame.plot=0)
n <- 10
A <- 1:n
P <- sort(rnorm(n)^2)
P <- P/sum(P)
T <- 1000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A, type='h', col='grey', frame.plot=0)
Ashift <- A + 0.5; points(ct ~ Ashift, type='h', col='blue', frame.plot=0)
plot(P*T ~ A, type='h', col='grey', xlim=c(0,n+0.5), frame.plot=0)
Ashift <- A + 0.5; points(ct ~ Ashift, type='h', col='blue', frame.plot=0)
n <- 100
A <- 1:n
P <- sort(rnorm(n)^2)
P <- P/sum(P)
T <- 1000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A, type='h', col='grey', xlim=c(0,n+0.5), frame.plot=0)
Ashift <- A + 0.5; points(ct ~ Ashift, type='h', col='blue', frame.plot=0)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A,
type='h', col='grey',
xlab="Alphabet", ylab="Count",
xlim=c(0,n+0.5), frame.plot=0)
Ashift <- A + 0.5;
points(ct ~ Ashift,
type='h', col='blue', frame.plot=0)
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
nr <- 8
nc <- 16
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
hash
sketch <- matrix(0, nrow=nr, ncol=nc)
sketch
for(s in S){
for(i in 1:nr){
mat[i, hash[[i]][s]] <- mat[i, hash[[i]][s]] + 1
}
}
for(s in S){
for(i in 1:nr){
sketch[i, hash[[i]][s]] <- mat[i, hash[[i]][s]] + 1
}
}
for(s in S){
for(i in 1:nr){
sketch[i, hash[[i]][s]] <- sketch[i, hash[[i]][s]] + 1
}
}
sketch
ct.est <- sapply(A, function(a) min(sapply(1:nr, function(i) hash[[i]][a])))
ct.est
ct
n <- 100
A <- 1:n
P <- sort(rnorm(n)^2)
P <- P/sum(P)
T <- 1000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A,
type='h', col='grey',
xlab="Alphabet", ylab="Count",
xlim=c(0,n+0.5), frame.plot=0)
Ashift <- A + 0.5;
points(ct ~ Ashift,
type='h', col='blue', frame.plot=0)
nr <- 8
nc <- 16
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
sketch[i, hash[[i]][s]] <- sketch[i, hash[[i]][s]] + 1
}
}
ct.est <- sapply(A, function(a) min(sapply(1:nr, function(i) hash[[i]][a])))
plot(ct.est ~ ct, col='blue', frame.plot=0)
nr <- 32
nc <- 64
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
sketch[i, hash[[i]][s]] <- sketch[i, hash[[i]][s]] + 1
}
}
ct.est <- sapply(A, function(a) min(sapply(1:nr, function(i) hash[[i]][a])))
plot(ct.est ~ ct, col='blue', frame.plot=0)
nr <- 1
nc <- 16
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
sketch
for(s in S){
for(i in 1:nr){
sketch[i, hash[[i]][s]] <- sketch[i, hash[[i]][s]] + 1
}
}
nc <- n
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
sketch[i, hash[[i]][s]] <- sketch[i, hash[[i]][s]] + 1
}
}
sketch
ct.est <- sapply(A, function(a) min(sapply(1:nr, function(i) hash[[i]][a])))
plot(ct.est ~ ct, col='blue', frame.plot=0)
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch(i, hash[[i]][a]))
)
)
plot(ct.est ~ ct, col='blue', frame.plot=0)
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
plot(ct.est ~ ct, col='blue', frame.plot=0)
nr <- 16
nc <- 32
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
plot(ct.est ~ ct, col='blue', frame.plot=0)
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
n <- 1000
A <- 1:n
P <- sort(rnorm(n)^2)
P <- P/sum(P)
T <- 1000000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A,
type='h', col='grey',
xlab="Alphabet", ylab="Count",
xlim=c(0,n+0.5), frame.plot=0)
Ashift <- A + 0.5;
points(ct ~ Ashift,
type='h', col='blue', frame.plot=0)
nr <- 16
nc <- 32
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
nr <- 16
nc <- 256
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct - ct.est)
hist(ct.est - ct)
hist(ct.est - ct, bins=20)
hist(ct.est - ct, breaks=20)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct.est - ct, breaks=20, col='grey')
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct.est - ct, breaks=20, col='grey', main="Over-estimate")
nr <- 64
nc <- 256
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(ct.est - ct, breaks=20, col='grey',
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
err <- ct.est - ct
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
err
err <- (ct.est - ct)/ct
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
err
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
max(err)
min(err)
min()
min(err)
ct
err <- (ct.est - ct)/ct
min(err)\
min(err)
max(err)
err
err <- (ct.est - ct)/mean(ct)
err
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
cdf(err)
cumsum(err)
plot(cumsum(err))
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey',
xlab="Over-estimate", main="")
p
err
?hist
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
hist(err, breaks=20, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
h <- hist(err, breaks=20, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
h <- hist(err, breaks=20, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
h
breaks <- seq(0,1,0.01)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
breaks <- seq(0,1,0.01)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
h
h$density
sum(h$density * 0.01)
plot(h$density ~ breaks, type='h', col='blue', frame.plot=0, log='y')
h$density
breaks
breaks[1:-1]
plot(h$density ~ breaks[1:(length(breaks)-1)], type='h', col='blue', frame.plot=0, log='y')
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='h', col='blue', frame.plot=0, log='y')
plot(h$density ~ breaks[1:(length(breaks)-1)], type='h', col='blue', frame.plot=0, log='xy')
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.001
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.001
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
nr <- 16
nc <- 64
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
err <- (ct.est - ct)/mean(ct)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
n <- 1000
A <- 1:n
P <- sort(rnorm(n)^2)
P <- P/sum(P)
T <- 1000000
S <- sample(A, T, replace=TRUE, prob=P)
ct <- sapply(A, function(a) sum(S==a))
plot(P*T ~ A,
type='h', col='grey',
xlab="Alphabet", ylab="Count",
xlim=c(0,n+0.5), frame.plot=0)
Ashift <- A + 0.5;
points(ct ~ Ashift,
type='h', col='blue', frame.plot=0)
nr <- 16
nc <- 64
hash <- lapply(1:nr, function(i) sample(1:nc, n, replace=TRUE))
sketch <- matrix(0, nrow=nr, ncol=nc)
for(s in S){
for(i in 1:nr){
j <- hash[[i]][s]
sketch[i,j] <- sketch[i,j] + 1
}
}
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
err <- (ct.est - ct)/mean(ct)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0, log='xy')
ct.est <- sapply(A, function(a)
min(
sapply(1:nr, function(i) sketch[i, hash[[i]][a]])
)
)
err <- (ct.est - ct)/mean(ct)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)], type='p', col='blue', frame.plot=0)
par(mfrow=c(2,1))
plot(ct.est ~ ct,
col='blue', frame.plot=0, cex=0.5,
xlab="True count", ylab="Sketch estimate")
abline(0,1, col='grey')
meshsize <- 0.01
breaks <- seq(0,1,meshsize)
h <- hist(err, breaks=breaks, col='grey', freq=FALSE,
xlab="Over-estimate", main="")
par(mfrow=c(1,1))
plot(h$density ~ breaks[1:(length(breaks)-1)],
log='y',
type='h', col='blue', frame.plot=0)
setwd("~/Projects/201512ttest/ttest")
shiny::runApp()
runApp('~/Projects/201601crossent/crossent')
runApp('~/Projects/201512nfgraph/nfgraph')
runApp('~/Projects/201801-wikiwords/wikiwords/shiny')
runApp('~/Blog/aws/201511wikisne/wikisne')
runApp('~/Projects/201703bias/bias_in_hr')
runApp('~/Projects/AWS/201507mnist/mnist-1.0')
runApp('~/Projects/AWS/201507zip/zip-1.1')
